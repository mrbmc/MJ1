package com.whtn{    import flash.display.Bitmap;    import flash.display.BitmapData;    import flash.display.Sprite;    import flash.display.GradientType;    import flash.events.MouseEvent;    import flash.geom.ColorTransform;    import flash.geom.Matrix;	public class Picker extends Sprite    {        private var bmpc: Bitmap;        private var bmp:BitmapData;        private var id:String;        private var w:int;        private var h:int;		private var _click:Boolean = false;		public static var COLORS:Array = new Array(0xff0000,0x8000FF,0x0000ff,0x0080FF,0x00CC00,0x80FF00,0xffff00,0xff8000,0xff0000);		        public static const COLOR_PICKED_EVT_TYPE: String = 'picked by picker';        public function Picker(_id:String, _c:Number = 0x808080, _w:int = 256, _h:int = 256, _x:int = 0, _y:int = 0)         {            id = _id;            w = _w;            h = _h;            x = _x;            y = _y;            bmp = new BitmapData(w, _h);            bmpc = new Bitmap(bmp);            addChild(bmpc);            refillBmp(_c);        }        public function get ID():String { return id; }        private function refillBmp(overColor:int = 0x7f7f7f, alphaStep:Number = 0.006):void {            var rtspr:Sprite = new Sprite();            var alphas: Array = new Array();            var ratios: Array = new Array();			var inc = 255 / Picker.COLORS.length;			for (i=(inc/2);i<=255;i+=inc) {				ratios.push(i);				alphas.push(1);			}            var matrix:Matrix = new Matrix();	            matrix.createGradientBox(w, h);            var spr:Sprite = new Sprite();				spr.graphics.beginGradientFill(GradientType.LINEAR, Picker.COLORS, alphas, ratios, matrix);				spr.graphics.drawRect(0, 0, w, h);				spr.graphics.endFill();            rtspr.addChild(spr);//			matrix = {matrixType:"box", x:0, y:0, w:w, h:h, r:0/180*Math.PI};//matrix:Matrix = new Matrix(); var boxWidth:Number = w; var boxHeight:Number = h/3; var boxRotation:Number = Math.PI / 2; // 90° matrix.createGradientBox(boxWidth, boxHeight, boxRotation, 0, h*.67); 			var fade:Sprite = new Sprite();				fade.graphics.beginGradientFill(GradientType.LINEAR, new Array(0xFFFFFF,0xFFFFFF),new Array(0,1),new Array(0,255),matrix);				fade.graphics.drawRect(0, 0.67, w, h);				fade.graphics.endFill();			rtspr.addChild(fade);matrix.createGradientBox(boxWidth, boxHeight, boxRotation, 0, 0); 			var blkfade:Sprite = new Sprite();				blkfade.graphics.beginGradientFill(GradientType.LINEAR, new Array(0x000000,0x000000),new Array(1,0),new Array(0,255),matrix);				blkfade.graphics.drawRect(0, 0, w, h/2);				blkfade.graphics.endFill();			rtspr.addChild(blkfade);/*			var blk:Sprite = new Sprite();				blk.graphics.beginFill(0x000000,1);				blk.graphics.drawRect(0, 0, w/2, h*.3);				blk.graphics.endFill();				blk.y = h;            rtspr.addChild(blk);*/			            bmp.draw(rtspr, new Matrix());              graphics.beginFill(0, 0);            graphics.drawRect(0, 0, w, h);            graphics.endFill();            buttonMode = true;            addEventListener(MouseEvent.MOUSE_DOWN, onMove);//            addEventListener(MouseEvent.MOUSE_UP, onClick);//            addEventListener(MouseEvent.MOUSE_OUT, onOut);            addEventListener(MouseEvent.MOUSE_MOVE, onMove);        }        public function adjustDarkness(percent:int):void {            var colorValue: int = int(255 * percent / 100);            var currentGray:int = colorValue + colorValue << 8 + colorValue << 16;            refillBmp(colorValue);        }        private function onDown(e:MouseEvent):void {			var col: int = bmp.getPixel(e.localX, e.localY);			dispatchEvent(new ColorEvent(col,e.currentTarget.ID));        }		private function onOut(e:MouseEvent):void {			this._click = false;		}		private function onMove(e:MouseEvent):void {			if(e.buttonDown) {	            var col: int = bmp.getPixel(e.localX, e.localY);	            dispatchEvent(new ColorEvent(col,e.currentTarget.ID));			}		}    }}