package com.whtn {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextFormat;	import flash.text.TextField;	import fl.controls.Button;	import fl.controls.Slider;	import fl.controls.SliderDirection;	import fl.events.SliderEvent;	import fl.controls.NumericStepper;	import fl.controls.CheckBox;	import com.whtn.Tube;	import com.whtn.Sequencer;	public class SN1UI extends MovieClip {		public var tfText:TextFormat = new TextFormat();		private var gridRef = new Array();		private var rowRef:MovieClip;// = new MovieClip();		public var globalBrightness:Number = 100;		public var sequencer:Sequencer = new Sequencer();		public function SN1UI ():void {			super();			var row = 0;			var w = 30;			var h = 30;			var angle = (row * 30);			//Add the star lights			for(i=0;i<60;i++) {				if(i%5==0) {					angle = (row*30);					rowRef = new MovieClip();					rowRef.rotation = angle;					rowRef.y = 6*w;					addChild(rowRef);					row++;				}				var btn = new PalButton(i,w,h);					btn.x = w+((i%5)*(w+2));					btn.y = 0;					btn.lbl.visible = false;					//btn.rotation = -angle;								btn.spot.addEventListener(MouseEvent.MOUSE_DOWN, LEDOverHandler);					btn.spot.addEventListener(MouseEvent.MOUSE_OVER, LEDOverHandler);					btn.spot.addEventListener(MouseEvent.MOUSE_UP, LEDOutHandler);					btn.spot.addEventListener(MouseEvent.MOUSE_OUT, LEDOutHandler);				rowRef.addChild(btn);				gridRef.push(btn);			}			//Add the UV lights			angle = 0;			for(i=60;i<64;i++) {				btn = new PalButton(i,w,h,0x6600FF);				var w10 = w * 10;				btn.x = ((i%2) * (w * 11)) - (w * 6);				btn.y = (Math.round((i%4)/4)*330)-0;				btn.alpha = 0;				btn.name = "uv" + (i%4);				addChild(btn);				gridRef.push(btn);			}			var uvSlider:Slider = new Slider();				uvSlider.move(60,380);				uvSlider.setSize(120,20);				uvSlider.liveDragging = true;				uvSlider.value = 0;				uvSlider.minimum = 0;				uvSlider.maximum = 100;				uvSlider.snapInterval = 1;				uvSlider.tickInterval = 10;				uvSlider.value = 0;				uvSlider.direction = SliderDirection.HORIZONTAL;				uvSlider.addEventListener(SliderEvent.CHANGE, uvHandler);			addChild(uvSlider);			var wishButton:Button = new Button();				wishButton.setSize(80,40);				wishButton.move(-40,380);				wishButton.label = "Make a wish";				wishButton.addEventListener(MouseEvent.MOUSE_DOWN,wishHandler);			addChild(wishButton);		}		private function uvHandler(e:SliderEvent):int {			//var uv:Array = new Array(new Array());			for(i=60;i<64;i++) {				dispatchEvent(new LightEvent(i,e.value,null));//				getChildByName("uv" + (i%4)).alpha = (e.value / 100);				gridRef[i].alpha = e.value/100;			}		}		private function wishHandler(e:MouseEvent):void {			var starIndex = 0;			var starArray = new Array(6,10,7,0,8,5,9,2,4,3,11,1);			var fx = new Effect("shooter");				fx.sequence = new Array();			var star = starArray[starIndex]*5;			trace(star);			for(i=(star+4),end=star;i>=end;i--) {				fx.sequence.push(new Array(i+""));			}			star = (star>=30) ? star-30 : star+30;			for(i=star,end=star+5;i<end;i++) {				fx.sequence.push(new Array(i+""));			}			//engine.go(fx);			dispatchEvent(new LightEvent(-1,100,fx.sequence));			starIndex++;			if(starIndex>=12) starIndex = 0;		}		private function LEDOverHandler(event:MouseEvent):void {			var idx = event.currentTarget.parent.index;			if(event.buttonDown==true) {				dispatchEvent(new DebugEvent("star: "+idx));				dispatchEvent(new LightEvent(idx,100));				gridRef[idx].lite.alpha = 1;			}		}		private function LEDOutHandler(event:MouseEvent):void {			var idx = event.currentTarget.parent.index;			//light(idx,0);			dispatchEvent(new LightEvent(idx,0));				gridRef[idx].lite.alpha = 0;		}				public function update(e:LightEvent):void {			if(e.display!=null){				for(i in e.display) {					_brightness = (i<60) ? (e.display[i]/100 * globalBrightness) : e.display[i];					if(gridRef[i])						gridRef[i].lite.alpha = _brightness/100;				}			} else {				_brightness = (e.index<60) ? (e.brightness / 100 * globalBrightness) : e.brightness;				gridRef[e.index].lite.alpha = _brightness / 100;			}		}	}}