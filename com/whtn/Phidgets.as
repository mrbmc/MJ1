package com.whtn {	import com.phidgets.*;	import com.phidgets.events.*;	import com.whtn.DebugEvent;	import flash.events.Event;	import flash.display.Sprite;	public class Phidgets extends Sprite {		//our devices		private var ceiling:PhidgetLED = new PhidgetLED();		private var wallLed:PhidgetLED = new PhidgetLED();		private var wallServoL:PhidgetAdvancedServo = new PhidgetAdvancedServo();		private var wallServoR:PhidgetAdvancedServo = new PhidgetAdvancedServo();		//Archives stores the last animation frame. Used to prevent repeat commands.		private var aLightArchive = new Array(64);		private var aTubeArchive = new Array(16);

		//Animation defaults		public var globalBrightness:Number = 100;		protected var nServoResetPosition:Number = 90;		public function Phidgets ():void {			initPhidget(ceiling,114519);			initPhidget(wallLed,115226);			initPhidget(wallServoL,169402);			initPhidget(wallServoR,169423);
			for(i=0;i<60;i++){				aLightArchive[i] = (0);			}			for(i=0;i<48;i++){				aTubeArchive[i] = {					'brightness':0,					'position':nServoResetPosition,					'color':0xff0000					};			}		}		private function _trace (o:Object):void {			dispatchEvent(new DebugEvent(o));		}				private function initPhidget(p:Phidget, serial:int=0x7FFFFFFF):void {			p.addEventListener(PhidgetEvent.CONNECT, this.onConnect);			p.addEventListener(PhidgetEvent.DISCONNECT, onDisconnect);			p.addEventListener(PhidgetEvent.DETACH,	this.onDetach);			p.addEventListener(PhidgetEvent.ATTACH,	this.onAttach);			p.addEventListener(PhidgetErrorEvent.ERROR, this.onError);			p.addEventListener(PhidgetDataEvent.POSITION_CHANGE, onPositionChange);			p.open("localhost", 5001, null, serial);		}		private function onConnect(e:PhidgetEvent):void {			_trace(e + " to webservice");		}		private function onDisconnect(e:PhidgetEvent):void {			_trace(e + " to webservice");		}		private function onAttach(e:PhidgetEvent):void {			_trace("attached: " +				   e.Device.Name + ":" + e.Device.Type + 				   " serial# " + e.Device.serialNumber + 				   " v" + e.Device.Version				   );			if(e.Device.Type == "PhidgetLED") {				/*				UV: 3.5v (max 4.1) / < 350mA				WHITE: 3.3v (max 3.8) / < 30mA				PHIDGET_LED_CURRENT_LIMIT_20mA - 20mA.
				PHIDGET_LED_CURRENT_LIMIT_40mA - 40mA.
				PHIDGET_LED_CURRENT_LIMIT_60mA - 60mA.
				PHIDGET_LED_CURRENT_LIMIT_80mA - 80mA.
				*/				e.Device.CurrentLimit = 3;				e.Device.Voltage = 2;				_trace("current:"+e.Device.CurrentLimit + " / voltage:"+e.Device.Voltage);			} else if (e.Device.Type == "PhidgetAdvancedServo") {				for(i=0;i<8;i++) {					e.Device.setServoType(i, PhidgetAdvancedServo.PHIDGET_SERVO_HITEC_HS422);					e.Device.setEngaged(i, true);					e.Device.setPosition(i, nServoResetPosition);					e.Device.setVelocityLimit(i, 5);				}			}		}		private function onDetach(e:PhidgetEvent):void {			_trace(e);		}				private function onError(e:PhidgetErrorEvent):void {			_trace(e);		}		private function onPositionChange(e:PhidgetEvent):void {			//		}				public function sn1 (e:LightEvent):void {			if(!ceiling.isAttached)				return;			var _brightness:int = 0;			if(e.display!=null){				for(i in e.display) {					_brightness = (i<60) ? (e.display[i]/100*globalBrightness) : e.display[i];					if(aLightArchive[i] != _brightness || _brightness<=0)						ceiling.setDiscreteLED( i, _brightness );					aLightArchive[i]=_brightness;				}			} else {				_brightness = (e.index<60) ? (e.brightness / 100 * globalBrightness) : e.brightness;				ceiling.setDiscreteLED( e.index, Math.max(0,_brightness) );				aLightArchive[e.index] = _brightness;			}			return;		}

		private function updateMJ1 (i,ts:TubeSet) {
			if(ts.brightness >=0) aTubeArchive[i].brightness = ts.brightness;			if(ts.color >= 0) aTubeArchive[i].color = ts.color;
			if(ts.position >=0) aTubeArchive[i].position = ts.position;			var o = aTubeArchive[i];			var rgb = Drawing.hex2rgb(o.color);			var _brightness = (i < 16) ? Math.abs(o.brightness / 100 * globalBrightness) : o.brightness;
			//_trace("updateMJ1_" + i + ": " + o.brightness + "/" + o.position + "/" + o.color);			//optimize events sent to phidgets by not sending dupes			//_trace(o.index + ":" + o.brightness + "/" + o.position + "(" + rgb.r + "," + rgb.g + "," + rgb.b+")");			//if(aTubeArchive[i].brightness != o.brightness || aTubeArchive[i].color!=o.color) {				//_trace("led"+ii+" o.b:"+o.brightness+" b:"+b+" wall:"+wallLed.getDiscreteLED(ii));				if(wallLed.isAttached) {					//prepare color					//_trace("led"+ii+" o.b:"+o.brightness+":"+wallLed.getDiscreteLED(ii));					var ii = i*3;					var b = (o.lit) ? (o.brightness/100) * globalBrightness : 0;					wallLed.setDiscreteLED( ii, (rgb.r/255) * b);					wallLed.setDiscreteLED( ii+1, (rgb.g/255) * b * .80	);//.92					wallLed.setDiscreteLED( ii+2, (rgb.b/255) * b * .99);//.88				}			//}			//servo update
			// We only engage if we're moving to prevent the motors from burning out
			
			var servoController = (i < 8) ? wallServoL : wallServoR;
			if(servoController.isAttached) {
				var diff = Math.abs(pos - servoController.getPosition(i));
				servoController.setEngaged(i, (diff > 2));				var pos = (aTubeArchive[i].position*.667) + 30;				servoController.setPosition( i, pos );			}
			/*if(wallServoL.isAttached || wallServoR.isAttached) {
				var diffL = Math.abs(pos-wallServoL.getPosition(i));				var diffR = Math.abs(pos-wallServoR.getPosition(i));				wallServoL.setEngaged(i, (diffL > 2));				wallServoR.setEngaged(i, (diffR > 2));				if(aTubeArchive[i].position>=0) {					var pos = (aTubeArchive[i].position*.667) + 30;					if(i < 8 && wallServoL.isAttached) {						wallServoL.setPosition( i, pos );					} else if(i >=8 && wallServoR.isAttached) 						wallServoR.setPosition( i, pos );				}
			}*/		}		public function MJ1 (e:TubeEvent):void {			//_trace(e.index+":"+e.brightness+":"+e.color);			if(e.index is Array){				for(i in e.index) {					updateMJ1(i,e.index[i]);				}			} else {				updateMJ1(e.index,e.settings);			}		}				public function blackout(e:Event) {			for(i=0;i<64;i++) {				ceiling.setDiscreteLED( i, 0 );			}			for(i=0;i<48;i++) {				wallLed.setDiscreteLED( i, 0 );			}			for(i=0;i<16;i++) {				if(i<8) {					//wallServoL.setPosition( i, nServoResetPosition );				} else {					//wallServoR.setPosition( i, nServoResetPosition );				}			}		}				public function listener (e:Event) {			//trace('phidgets.listener()'+e.type);
			if(e is TubeEvent) {				this.MJ1(e);			} else if (e is LightEvent) {				this.sn1(e);			}		}	}}