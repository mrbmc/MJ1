package com.whtn {	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.text.TextFormat;	import flash.text.TextField;	import com.whtn.TubeEvent;	import com.whtn.PalButton;	import com.whtn.PalEvent;	public class Tube extends Sprite {		public var steps:Number = 8;		//components		public var index:String;		public var bg:Sprite = new Sprite();		public var LED:Sprite = new Sprite();		public var trackSpot:Sprite = new Sprite();		public var lit:Boolean = true;		public var lbl:TextField;		public var trigger:PalButton;				private var increments:Number = 18;		private var maxRotation:Number = MJ1UI.MAX_ROTATION;		public var w:Number = 0;		public var h:Number = 0;		private var t:Number = Math.max(w / increments,20);//handle width		//properties		public var settings:TubeSet = new TubeSet(this.index,50,90,0xFF0000);		public var brightness:Number = 0;		public var color:Number = 0xFF0000;		private var _position:Number = 90;		public function set position(n:Number) {			this._position = Math.round((n/maxRotation)*increments) * (maxRotation/increments);		}		public function get position():Number {			return this._position;		}		var myFont:FontDIN = new FontDIN();		var myTextFormat:TextFormat = new TextFormat();		public function Tube (i:Object,_w:Number,_h:Number,r:Number=0,c:Number=0x000000) {			super();			this.index = i;			this.name = "tube" + i;			this.position = r;			this.color = c;			this.w = _w;			this.h = _h;			//track
			addChild(this.bg);			Drawing.drawBox(this.bg,w,h,0x000000,1,0,0);			bg.x=bg.y=0;			this.bg.name = "background";			//slider
			addChild(LED);			Drawing.drawBox(this.LED,this.t,this.h,c,1,0,0);			LED.name = "LED";			//LED.alpha = this.parent.globalBrightness;			LED.x = (this.position/this.maxRotation) * (w - this.t);
			lbl = new TextField();			lbl.name = "label";			lbl.text = i;			lbl.x = w+1;			lbl.y = 0+1;			lbl.textColor = 0x999999;			lbl.selectable = false;			this.addChild(lbl);			myTextFormat.font = myFont.fontName;			myTextFormat.size = 10;			lbl.setTextFormat(myTextFormat);			lbl.embedFonts = true;			lbl.selectable = false;			Drawing.drawBox(this.trackSpot,w,h,0xFFFFFF,0,0,0);			trackSpot.buttonMode = true;			trackSpot.useHandCursor = true;			trackSpot.name = "target";			trackSpot.addEventListener(MouseEvent.MOUSE_DOWN, moveHandler);			trackSpot.addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);			addChild(trackSpot);
			trigger = new PalButton(i,h,h,0x000000,true);			trigger.x = (w)+21;			trigger.name = "trigger";
			trigger.lite.alpha = this.lit * 100;			//trigger.spot.addEventListener(MouseEvent.MOUSE_DOWN,triggerHandler);			trigger.spot.addEventListener(MouseEvent.MOUSE_UP,triggerHandler);			//trigger.spot.addEventListener(MouseEvent.MOUSE_MOVE,triggerHandler);			trigger.spot.addEventListener(MouseEvent.MOUSE_OUT,triggerHandler);			addChild(trigger);		}		private function triggerHandler(e:MouseEvent):void {			if(e.type==MouseEvent.MOUSE_UP || (e.type==MouseEvent.MOUSE_OUT && e.buttonDown == true) ) {
				this.lit = !this.lit;
				e.currentTarget.parent.lite.alpha = this.lit * 100;
				dispatchEvent(new PalEvent({'type':'litChange','key':this.index,'value':this.lit}));
			}
		}		private function moveHandler(e:MouseEvent) {			if(e.buttonDown) {				p = e.currentTarget.parent;				a = (e.localX / p.w) * this.maxRotation;				p.position = a;				var ts = new TubeSet(this.index,-1,this.position);				update(ts);				dispatchEvent(new TubeEvent(this.index,ts));			}		}		private function LEDOverHandler(event:MouseEvent):void {			var idx = event.currentTarget.parent.index;			if(event.buttonDown==true) {				var ts = new TubeSet(idx,100);				dispatchEvent(new TubeEvent(idx,ts));			}		}		private function LEDOutHandler(event:MouseEvent):void {			var idx = event.currentTarget.parent.index;			var ts = new TubeSet(idx,0);			dispatchEvent(new TubeEvent(this.index,ts));		}		public function update(s:TubeSet) {			//if(s.index != this.index) return;			//trace("tube" + this.index + ".update" + s.brightness);			if(s.color>0) this.color = s.color;			if(s.position>=0) this.position = s.position;			if(s.brightness >= 0) this.brightness = s.brightness;
			
//			trace(s.brightness);//			trace("update.tube." + s.index + ": " + s.brightness + "/" + s.position + "/" + s.color);						Drawing.setColor(this.LED, this.color);			this.LED.x = (this.position / this.maxRotation) * (this.w - this.t);
			var b = ((this.brightness / 100) * this.parent.globalBrightness);//1.3 multiplier helps monitor simulate LEDs			this.LED.alpha = Math.max((this.lit?b:0),0);
//			trace(this.brightness + ":" + this.parent.globalBrightness);
		}	}}