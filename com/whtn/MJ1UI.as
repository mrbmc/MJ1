package com.whtn {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextFormat;	import flash.text.TextField;	import fl.controls.Slider;	import fl.controls.SliderDirection;	import fl.controls.NumericStepper;	import fl.controls.CheckBox;	import fl.controls.RadioButton;	import fl.controls.RadioButtonGroup;	import com.whtn.Tube;	import com.whtn.Sequencer;	public class MJ1UI extends MovieClip {		var myFormat:TextFormat = new TextFormat();		public static var MAX_ROTATION:Number = 180;		public var globalBrightness = 100;		public var sequencer:Sequencer = new Sequencer();		public function MJ1UI ():void {			super();			myFormat.font = "_sans";			myFormat.size = 10;			myFormat.color = 0xFFFFFF;			var tube:Tube;// = new MovieClip();			var w = 180;			var h = 33;			var row = 0;			var rows = 8;			var steps = 12;			for (i=0;i<(rows*2);i++) {				var c = (i<8) ? 0xFF0000 : 0x0000FF				tube = new Tube(i,w,h,90,c)				//tube.id = "tube" + i;				tube.x = (Math.floor(i/rows)*(320));				tube.y = (i%rows)*(h+5);				addChild(tube);				tube.addEventListener("tube",tubeHandler);			}			function bankHandler(e:TubeEvent) {			}			function tubeHandler(e:TubeEvent) {				var min = e.index * 1;				var max = e.index * 1;				var comp = false;				if(cbSyncBanks.selected) {					min = 0;					max = 16;					comp = true;				} else if (e.index<8 && cbLockSlidersL.selected) {					min = 0;					max = 8;					comp = true;				} else if(e.index >= 8 && cbLockSlidersR.selected) {					min = 8;					max = 16;					comp = true;				}//				trace(min + "-" + max);				if(comp) {					e.stopPropagation();					var display = new Array();					for(i=min;i<max;i++) {						var te = new TubeEvent(i,e.brightness,e.rotation,e.color);						display[i] = te;					}					dispatchEvent(new TubeEvent(display));					update(new TubeEvent(display));				}			}						var cbSyncBanks:CheckBox = new CheckBox();				cbSyncBanks.move(240,0);				cbSyncBanks.label = "sync";				cbSyncBanks.addEventListener(MouseEvent.CLICK, synchHandler);				cbSyncBanks.setStyle("textFormat", myFormat);			addChild(cbSyncBanks);			var cbReflect:CheckBox = new CheckBox();				cbReflect.move(240,30);				cbReflect.label = "reflect";				cbReflect.addEventListener(MouseEvent.CLICK, synchHandler);				cbReflect.setStyle("textFormat", myFormat);			addChild(cbReflect);			var cbReverse:CheckBox = new CheckBox();				cbReverse.move(240,60);				cbReverse.label = "reverse";				cbReverse.addEventListener(MouseEvent.CLICK, synchHandler);				cbReverse.setStyle("textFormat", myFormat);			addChild(cbReverse);			function synchHandler(e:MouseEvent) {			}						var cbLockSlidersL:CheckBox = new CheckBox();				cbLockSlidersL.move(0,-30);				cbLockSlidersL.label = "lock";				cbLockSlidersL.addEventListener(MouseEvent.CLICK, lockSliders);				cbLockSlidersL.setStyle("textFormat", myFormat);			addChild(cbLockSlidersL);			var cbLockSlidersR:CheckBox = new CheckBox();				cbLockSlidersR.move(320,-30);				cbLockSlidersR.label = "lock";				cbLockSlidersR.addEventListener(MouseEvent.CLICK, lockSliders);				cbLockSlidersR.setStyle("textFormat", myFormat);			addChild(cbLockSlidersR);			function lockSliders(e:MouseEvent) {			}						var pickerL:Picker = new Picker('colorLeft',0xFFFFFF,245,50);				pickerL.y = (h+5) * rows;				pickerL.x = 0;				pickerL.addEventListener("color",onColor);				addChild(pickerL);			var pickerR:Picker = new Picker('colorRight',0xFFFFFF,245,50);				pickerR.y = (h+5) * rows;				pickerR.x = 320;				pickerR.addEventListener("color",onColor);				addChild(pickerR);						function onColor (e:ColorEvent) {				var max = (e.targetName=="colorLeft") ? 8 : 16;					var min = (e.targetName=="colorLeft") ? 0 : 8;				var display = [];				for(i = min;i < max;i++) {					var target_mc = getChildByName('tube' + i);						target_mc.color = e.color;					Drawing.setColor(target_mc.lite,e.color);					display.push(target_mc);				}				var hsv = Drawing.hex2hsv(e.color);				trace(Math.abs(hsv.h-360));				dispatchEvent(new TubeEvent(display));			}		}		public function update (e:TubeEvent):void {			if(e.index is Array){				for(i in e.index) {					getChildByName('tube' + i).update(e.index[i]);				}			} else {				getChildByName('tube' + e.index).update(e);			}		}	}}