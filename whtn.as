import flash.display.StageDisplayState;import fl.controls.Button;import fl.events.SliderEvent;import flash.events.MouseEvent;import com.wcp.*;var globalSpeed = 120;var myFormat:TextFormat = new TextFormat();	myFormat.font = "_sans";	myFormat.size = 10;	myFormat.color = 0xFFFFFF;function _trace (o:Object) {	msg = (o is DebugEvent) ? o.msg : o;	trace(msg);	myConsole.text = msg+"\n"+myConsole.text;}String.prototype.titleCase = function (_input:String=null) {	inputString = (_input==null)?this:_input;	return inputString.split(" ").map(function(element:String, index:int, arr:Array):String{		return element.substr(0, 1).toLocaleUpperCase() + element.substr(1);	}).join(" ");}function goFullScreen(event:Event):void{	if (stage.displayState == StageDisplayState.FULL_SCREEN) {		stage.removeEventListener(Event.ENTER_FRAME,_handleEnterFrame);		trace(stage.displayState);	} else {		stage.displayState=StageDisplayState.FULL_SCREEN;	}}stage.addEventListener(Event.ENTER_FRAME, goFullScreen)var engine:Engine = new Engine();var sequencer:Sequencer = new Sequencer();var phidget:Phidgets = new Phidgets();//------------------------------------------------------// INTERFACESvar mj1 = new MJ1UI();	mj1.x = 10;	mj1.y = 200;addChild(mj1);var sn1 = new SN1UI();	sn1.x = 874;	sn1.y = 5;addChild(sn1);//------------------------------------------------------//EVENT ROUTING... because databinding is a chore//this.addEventListener("light",phidget.listener);//this.addEventListener("tube",phidget.listener);//route commands from the UI to the outputaddEventListener("tube",phidget.listener);sn1.addEventListener("light",phidget.listener);//route commands from the animator to the outputengine.addEventListener("light",phidget.listener);engine.addEventListener("tube",phidget.listener);//route commands from the animator to the UIengine.addEventListener("light",sn1.update);engine.addEventListener("tube",mj1.update);//route commands to and from the engine & sequencerengine.addEventListener("effect",sequencer.listener);sequencer.addEventListener("effect",engine.listener);engine.addEventListener("debug",_trace);phidget.addEventListener('debug',_trace);//------------------------------------------------------// SEQUENCER CONTROLSfunction setBrightness(v:Number):void {	controlWrapper.volumeLabel.text = v;	phidget.globalBrightness = v;	sn1.globalBrightness = v;}function brightnessHandler(event:Event):void {	setBrightness(event.value);}controlWrapper.brightnessSlider.addEventListener(SliderEvent.CHANGE, brightnessHandler);function speedHandler(e:SliderEvent):int {	engine.speed = e.value;	controlWrapper.speedLabel.text = e.value;}function speedInputHandler(e:Event):int {	//trace(e);	engine.speed = e.value;	speedSlider.value = e.value;}controlWrapper.speedSlider.addEventListener(SliderEvent.CHANGE, speedHandler);controlWrapper.speedLabel.text = globalSpeed;controlWrapper.loopControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.loopControl.setStyle("textFormat", myFormat);//controlWrapper.randomControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.reflectControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.reflectControl.setStyle("textFormat", myFormat);controlWrapper.reverseControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.reverseControl.setStyle("textFormat", myFormat);controlWrapper.trailControl.addEventListener(Event.CHANGE,parameterHandler);function blackHandler(e:Event):void {	engine.blackout();	phidget.blackout();}var blackoutButton:Button = new Button();	blackoutButton.setSize(80,40);	blackoutButton.move(controlWrapper.x,110);	blackoutButton.label = "blackout";	blackoutButton.addEventListener(MouseEvent.MOUSE_DOWN,blackHandler);controlWrapper.addChild(blackoutButton);sequencer.addEventListener("blackout",blackHandler);function ballHandler(e:MouseEvent):void {	engine.go(effects.make("discoball"));}var ballButton:Button = new Button();	ballButton.setSize(blackoutButton.width,blackoutButton.height);	ballButton.move(blackoutButton.x+blackoutButton.width+10,blackoutButton.y);	ballButton.label = "discoball";	ballButton.addEventListener(MouseEvent.MOUSE_DOWN,ballHandler);controlWrapper.addChild(ballButton);function strobeHandler(e:MouseEvent):void {	engine.go(effects.make("strobe"));}var strobeButton:Button = new Button();	strobeButton.setSize(blackoutButton.width,blackoutButton.height);	strobeButton.move(ballButton.x+blackoutButton.width+10,blackoutButton.y);	strobeButton.label = "Camera's\nReady";	strobeButton.addEventListener(MouseEvent.MOUSE_DOWN,strobeHandler);controlWrapper.addChild(strobeButton);function parameterHandler(e:Event):void {	engine.loop = controlWrapper.loopControl.selected;//	engine.randomize = controlWrapper.randomControl.selected;	engine.reflect = controlWrapper.reflectControl.selected;	engine.reverse = controlWrapper.reverseControl.selected;	engine.trail = controlWrapper.trailControl.value;}function playerHandler(e:Event) {	switch(e.target.name) {		case "playButton":			if(!sequencer.hasItems())				return;			sequencer.go(true);			controlWrapper.playButton.visible = false;		break;		case "stopButton":			sequencer.go(false);			controlWrapper.playButton.visible = true;		break;		case "backButton":			sequencer.go();		break;		case "nextButton":			sequencer.stepper();		break;	}}controlWrapper.playButton.addEventListener(MouseEvent.CLICK,playerHandler);controlWrapper.stopButton.addEventListener(MouseEvent.CLICK,playerHandler);controlWrapper.backButton.addEventListener(MouseEvent.CLICK,playerHandler);controlWrapper.nextButton.addEventListener(MouseEvent.CLICK,playerHandler);//------------------------------------------------------//SEQUENCER/*var console:MovieClip = new MovieClip();	console.x = 5;	console.y = 315;addChild(console);*/var effects:EffectFactory = new EffectFactory();var hotKeysMap:Array = new Array();var j = 0;for(var effectName in effects.library) {	var fx:Effect = effects.library[effectName];	if(!fx.hasChannel)		continue;	var channel:Channel = new Channel(effectName,fx.hotKey);		channel.x = 0;		channel.y = (j*45)+30;		channel.addEventListener("effect",engine.listener);		channel.addEventListener("effect",sequencer.listener);	sequencerWrapper.addChild(channel);	hotKeysMap[fx.hotKey] = channel;	sequencer.addEventListener("effect",channel.queueHandler);	j++;}//------------------------------------------------------//MAGIC BUTTONSvar starIndex = 0;var starArray = new Array(6,10,7,0,8,5,9,2,4,3,11,1);function wishHandler(e:MouseEvent):void {	var fx = effects.make("stars");		fx.sequence = new Array();	//for(i=0;i<16;i++) fx.sequence.push(new Array());	//var star = Math.floor(Math.random()*12)*5;	var star = starArray[starIndex]*5;	trace(star);	for(i=(star+4),end=star;i>=end;i--) {		fx.sequence.push(new Array(i+""));	}	star = (star>=30) ? star-30 : star+30;	//if star-=60;	for(i=star,end=star+5;i<end;i++) {		fx.sequence.push(new Array(i+""));	}	//for(i=0;i<16;i++) fx.sequence.push(new Array());	engine.go(fx);	starIndex++;	if(starIndex>=12) starIndex = 0;}var wishButton:Button = new Button();	wishButton.setSize(100,40);	wishButton.move(1024-112,30);	wishButton.label = "Make a wish";	wishButton.addEventListener(MouseEvent.MOUSE_DOWN,wishHandler);sequencerWrapper.addChild(wishButton);/*function uvHandler(e:SliderEvent):int {	//var uv:Array = new Array(new Array());	for(i=60;i<64;i++) {		dispatchEvent(new LightEvent(i,e.value,null));		gridRef[i].lite.alpha = 0;		gridRef[i].alpha = e.value/100;	}}var uvSlider:Slider = new Slider();	uvSlider.move(wishButton.x+50,ballButton.y+50);	uvSlider.setSize(100,10);	uvSlider.liveDragging = true;	uvSlider.value = engine.speed;	uvSlider.minimum = 0;	uvSlider.maximum = 100;	uvSlider.snapInterval = 1;	uvSlider.tickInterval = 10;	uvSlider.value = 0;	uvSlider.direction = SliderDirection.VERTICAL;	uvSlider.addEventListener(SliderEvent.CHANGE, uvHandler);sequencerWrapper.addChild(uvSlider);*/sequencerWrapper.visible = false;// /EFFECTS SEQUENCER //------------------------------------------------------function tabHandler(e:MouseEvent) {	sequencerWrapper.visible = !sequencerWrapper.visible;	mj1.visible = sn1.visible = !sequencerWrapper.visible;}var uiTab:Button = new Button();	uiTab.setSize(80,40);	uiTab.move(strobeButton.x+blackoutButton.width+10,blackoutButton.y);	uiTab.label = "Preview \n Sequencer";	uiTab.addEventListener(MouseEvent.MOUSE_DOWN,tabHandler);addChild(uiTab);//------------------------------------------------------// KEYBOARD HANDLERfunction reportKeyDown(event:KeyboardEvent):void { 	var key = String.fromCharCode(event.charCode);	switch(key) {	case " ":		sequencer.go();	break;	case "z":		engine.go(engine.fx);	break;	case "x":		sequencer.stepper();	break;	case "l":		engine.loop = controlWrapper.loopControl.selected = !engine.loop;	break;	case ";":		engine.reflect = controlWrapper.reflectControl.selected = !engine.reflect;	break;	case "'":		engine.reverse = controlWrapper.reverseControl.selected = !engine.reverse;	break;	case "\\":		tabHandler(new MouseEvent(MouseEvent.CLICK));	break;	case "q":	case "w":	case "e":	case "r":	case "t":	case "y":	case "u":	case "i":	case "o":	case "p":	case "a":	case "s":	case "d":	case "f":	case "g":		if(hotKeysMap[key])			hotKeysMap[key].go();	break;	case "b":		engine.go(effects.make("discoball"));	break;	case "m":		engine.go(effects.make("strobe"));	break;		case "1":	case "2":	case "3":	case "4":	case "5":	case "6":	case "7":	case "8":	case "9":		controlWrapper.brightnessSlider.value = key * 10;		setBrightness(controlWrapper.brightnessSlider.value);	break;	case "`":		controlWrapper.brightnessSlider.value = 0;		setBrightness(controlWrapper.brightnessSlider.value);	break;	case "0":		controlWrapper.brightnessSlider.value = 100;		setBrightness(controlWrapper.brightnessSlider.value);	break;	default:		_trace("Key Pressed: " + String.fromCharCode(event.charCode) +         " (character code: " + event.charCode + ")"); 	break;	}} stage.addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);