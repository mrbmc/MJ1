import flash.display.StageDisplayState;import fl.controls.Button;import fl.events.SliderEvent;import flash.events.MouseEvent;import com.whtn.*;var globalSpeed = 120;var myFormat:TextFormat = new TextFormat();	myFormat.font = "_sans";	myFormat.size = 10;	myFormat.color = 0xFFFFFF;function _trace (o:Object) {	msg = (o is DebugEvent) ? o.msg : o;	trace(msg);	myConsole.text = msg+"\n"+myConsole.text;}String.prototype.titleCase = function (_input:String=null) {	inputString = (_input==null)?this:_input;	return inputString.split(" ").map(function(element:String, index:int, arr:Array):String{		return element.substr(0, 1).toLocaleUpperCase() + element.substr(1);	}).join(" ");}function goFullScreen(event:Event):void{	if (stage.displayState == StageDisplayState.FULL_SCREEN) {		stage.removeEventListener(Event.ENTER_FRAME,_handleEnterFrame);		trace(stage.displayState);	} else {		stage.displayState=StageDisplayState.FULL_SCREEN;	}}stage.addEventListener(Event.ENTER_FRAME, goFullScreen)var engine:Engine = new Engine();//var sequencer:Sequencer = new Sequencer();var phidget:Phidgets = new Phidgets();//------------------------------------------------------// INTERFACESvar sn1 = new SN1UI();	sn1.x = 800;	sn1.y = 200;	sn1.name = "sn1";addChild(sn1);var mj1 = new MJ1UI();	mj1.x = 10;	mj1.y = 200;	mj1.name = "mj1";addChild(mj1);//------------------------------------------------------//EVENT ROUTING... because databinding is a chore//route manual commands from the UI to the devicemj1.addEventListener("tube",phidget.listener);sn1.addEventListener("light",phidget.listener);//route commands from the animator to the devicesengine.addEventListener("light",phidget.listener);engine.addEventListener("tube",phidget.listener);//route commands from the animator to the UIengine.addEventListener("light",sn1.update);engine.addEventListener("tube",mj1.update);//route commands between the engine & sequencerengine.addEventListener( EffectEvent.EFFECT, sn1.sequencer.listener);engine.addEventListener( EffectEvent.EFFECT, mj1.sequencer.listener);mj1.sequencer.addEventListener( EffectEvent.EFFECT ,engine.listener);sn1.sequencer.addEventListener( EffectEvent.EFFECT ,engine.listener);engine.addEventListener("debug",_trace);phidget.addEventListener('debug',_trace);//------------------------------------------------------// SEQUENCER CONTROLSfunction setBrightness(v:Number):void {	controlWrapper.volumeLabel.text = v;	phidget.globalBrightness = v;	sn1.globalBrightness = v;}function brightnessHandler(event:Event):void {	setBrightness(event.value);}controlWrapper.brightnessSlider.addEventListener(SliderEvent.CHANGE, brightnessHandler);function speedHandler(e:SliderEvent):int {	engine.speed = e.value;	controlWrapper.speedLabel.text = e.value;}function speedInputHandler(e:Event):int {	//trace(e);	engine.speed = e.value;	controlWrapper.speedSlider.value = e.value;}controlWrapper.speedSlider.addEventListener(SliderEvent.CHANGE, speedHandler);controlWrapper.speedLabel.text = globalSpeed;controlWrapper.loopControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.loopControl.label = "Loop (l)";controlWrapper.loopControl.setStyle("textFormat", myFormat);//controlWrapper.randomControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.reflectControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.reflectControl.setStyle("textFormat", myFormat);controlWrapper.reflectControl.label = "Reflect (;)";controlWrapper.reverseControl.addEventListener(MouseEvent.CLICK, parameterHandler);controlWrapper.reverseControl.setStyle("textFormat", myFormat);controlWrapper.reverseControl.label = "Reverse (')";controlWrapper.trailControl.addEventListener(Event.CHANGE,parameterHandler);function blackHandler(e:Event):void {	engine.blackout();	phidget.blackout();}var blackoutButton:Button = new Button();	blackoutButton.setSize(80,40);	blackoutButton.move(controlWrapper.x,110);	blackoutButton.label = "blackout";	blackoutButton.addEventListener(MouseEvent.MOUSE_DOWN,blackHandler);controlWrapper.addChild(blackoutButton);mj1.sequencer.addEventListener("blackout",blackHandler);sn1.sequencer.addEventListener("blackout",blackHandler);function ballHandler(e:MouseEvent):void {	engine.go(fxFactory.make("discoball"));}var ballButton:Button = new Button();	ballButton.setSize(blackoutButton.width,blackoutButton.height);	ballButton.move(blackoutButton.x+blackoutButton.width+10,blackoutButton.y);	ballButton.label = "discoball";	ballButton.addEventListener(MouseEvent.MOUSE_DOWN,ballHandler);controlWrapper.addChild(ballButton);function strobeHandler(e:MouseEvent):void {	engine.go(fxFactory.make("strobe"));}var strobeButton:Button = new Button();	strobeButton.setSize(blackoutButton.width,blackoutButton.height);	strobeButton.move(ballButton.x+blackoutButton.width+10,blackoutButton.y);	strobeButton.label = "Camera's\nReady";	strobeButton.addEventListener(MouseEvent.MOUSE_DOWN,strobeHandler);controlWrapper.addChild(strobeButton);function parameterHandler(e:Event):void {	engine.loop = controlWrapper.loopControl.selected;//	engine.randomize = controlWrapper.randomControl.selected;	engine.reflect = controlWrapper.reflectControl.selected;	engine.reverse = controlWrapper.reverseControl.selected;	engine.trail = controlWrapper.trailControl.value;}function playerHandler(e:Event) {	switch(e.target.name) {		case "playButton":			if(!sn1.sequencer.hasItems())				return;			sn1.sequencer.go(true);			controlWrapper.playButton.visible = false;		break;		case "stopButton":			sn1.sequencer.go(false);			controlWrapper.playButton.visible = true;		break;		case "backButton":			sn1.sequencer.go();		break;		case "nextButton":			sn1.sequencer.stepper();		break;	}}controlWrapper.playButton.addEventListener(MouseEvent.CLICK,playerHandler);controlWrapper.stopButton.addEventListener(MouseEvent.CLICK,playerHandler);controlWrapper.backButton.addEventListener(MouseEvent.CLICK,playerHandler);controlWrapper.nextButton.addEventListener(MouseEvent.CLICK,playerHandler);//------------------------------------------------------//SEQUENCER/*var console:MovieClip = new MovieClip();	console.x = 5;	console.y = 315;addChild(console);*/var fxFactory:EffectFactory = new EffectFactory();for(var e in fxFactory.library) {	fxFactory.library[e].addEventListener( EffectEvent.EFFECT, engine.listener);	fxFactory.library[e].addEventListener( EffectEvent.EFFECT, getChildByName(fxFactory.library[e].device).sequencer.listener);}var j = 0;for(var effectName in fxFactory.library) {	var effect:Effect = fxFactory.library[effectName];	if(!effect.channel)		continue;	var channel:Channel = new Channel(effect, effect.hotKey);		channel.x = 0;		channel.y = (j*45)+30;		channel.addEventListener( EffectEvent.EFFECT, engine.listener);		channel.addEventListener( EffectEvent.EFFECT, getChildByName(effect.device).sequencer.listener);		EffectEvent.CHANGED	sequencerWrapper.addChild(channel);	getChildByName(effect.device).sequencer.addEventListener( EffectEvent.EFFECT ,channel.queueHandler);	j++;}//------------------------------------------------------sequencerWrapper.visible = false;// /EFFECTS SEQUENCER //------------------------------------------------------function tabHandler(e:MouseEvent) {	sequencerWrapper.visible = !sequencerWrapper.visible;	mj1.visible = !sequencerWrapper.visible;	sn1.height *= (!sequencerWrapper.visible) ? 3 : .3333;	sn1.width *= (!sequencerWrapper.visible) ? 3 : .3333;	sn1.x = (!sequencerWrapper.visible) ? 800 : 950;	sn1.y = (!sequencerWrapper.visible) ? 200 : 10;}var uiTab:Button = new Button();	uiTab.setSize(80,40);	uiTab.move(strobeButton.x+blackoutButton.width+10,blackoutButton.y);	uiTab.label = "Preview/\nSequencer (\\)";	uiTab.addEventListener(MouseEvent.MOUSE_DOWN,tabHandler);addChild(uiTab);//------------------------------------------------------// KEYBOARD HANDLERfunction reportKeyDown(event:KeyboardEvent):void { 	var key = String.fromCharCode(event.charCode);	switch(key) {	case " ":		//sequencer.go();	break;	case "<":		engine.go(engine.fx);	break;	case ">":		//sequencer.stepper();	break;	case "M":		mj1.cbSyncBanks.selected = !mj1.cbSyncBanks.selected;	break;	case "L":		engine.mj1Loop = mj1.cbLoop.selected = !mj1.cbLoop.selected;	break;	case "K":		engine.mj1Reflect = mj1.cbReflect.selected = !mj1.cbReflect.selected;	break;	case 'J':		engine.mj1Reverse = mj1.cbReverse.selected = !mj1.cbReverse.selected;	break;	case "l":		engine.loop = controlWrapper.loopControl.selected = !engine.loop;	break;	case "k":		engine.reflect = controlWrapper.reflectControl.selected = !engine.reflect;	break;	case "j":		engine.reverse = controlWrapper.reverseControl.selected = !engine.reverse;	break;	case "\\":		tabHandler(new MouseEvent(MouseEvent.CLICK));	break;	case "q":	case "w":	case "e":	case "r":	case "t":	case "y":	case "u":	case "i":	case "o":	case "p":	case "Q":	case "W":	case "E":	case "R":	case "T":	case "Y":		if(fxFactory.hotKeysMap[key]) {			fxFactory.hotKeysMap[key].go();		}	break;	case "b":		engine.go(fxFactory.make("discoball"));	break;	case "m":		engine.go(fxFactory.make("strobe"));	break;	case "-":	case "_":		engine.speed -= 5;		controlWrapper.speedLabel.text = engine.speed;		controlWrapper.speedSlider.value = engine.speed;	break;	case "=":	case "+":		engine.speed += 5;		controlWrapper.speedLabel.text = engine.speed;		controlWrapper.speedSlider.value = engine.speed;	break;	case "1":	case "2":	case "3":	case "4":	case "5":	case "6":	case "7":	case "8":	case "9":		controlWrapper.brightnessSlider.value = key * 10;		setBrightness(controlWrapper.brightnessSlider.value);	break;	case "`":		controlWrapper.brightnessSlider.value = 0;		setBrightness(controlWrapper.brightnessSlider.value);	break;	case "0":		controlWrapper.brightnessSlider.value = 100;		setBrightness(controlWrapper.brightnessSlider.value);	break;	default:		_trace("Key Pressed: " + String.fromCharCode(event.charCode) +         " (character code: " + event.charCode + ")"); 	break;	}} stage.addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);import com.flashdynamix.utils.SWFProfiler;SWFProfiler.init(stage, this);